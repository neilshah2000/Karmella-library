{"version":3,"sources":["services/book.service.js","views/books/AuthorList.js","views/books/BookEditCreate.js"],"names":["getBooks","params","endpoint","url","window","location","host","console","log","builtUrl","URL","Object","keys","forEach","key","searchParams","append","buildParams","fetch","then","response","json","getBook","bookId","createBook","book","request","method","body","JSON","stringify","headers","Cookies","get","updateBook","id","getAuthors","result","map","author","value","label","first_name","last_name","AuthorList","props","options","children","maxHeight","getValue","initialOffset","indexOf","height","itemCount","length","itemSize","initialScrollOffset","index","style","BookEditCreate","useParams","useState","title","titleShort","isbn","callNumber","language","pages","publisher","publisherPlace","issued","collectionTitle","place","abstract","bookFields","setBookFields","authors","setAuthors","selectedAuthors","setSelectedAuthors","onFormInputChange","e","field","target","myBook","parse","useEffect","a","Promise","all","authorData","bookData","originalSelectedAuthors","filter","myAuth","includes","htmlFor","components","MenuList","onChange","newSelected","isMulti","placeholder","name","rows","className","type","size","color","onClick","auth","res"],"mappings":"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","file":"static/js/6.d070289a.chunk.js","sourcesContent":["import Cookies from 'js-cookie';\n\nfunction getBooks(params) {\n    let endpoint = '/catalog/api/books/';\n    endpoint = buildParams(endpoint, params);\n    return fetch(endpoint)\n        .then(response => {return response.json()})\n}\n\nfunction getBook(bookId) {\n    let endpoint = '/catalog/api/books/' + bookId;\n    return fetch(endpoint)\n        .then(response => {return response.json()})\n}\n\nfunction createBook(book) {\n    let endpoint = '/catalog/api/books/';\n    let request = {\n        method: 'POST',\n        body: JSON.stringify(book),\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFTOKEN': Cookies.get('csrftoken')\n        }\n    }\n    return fetch(endpoint, request)\n        .then(response => {return response.json()})\n}\n\nfunction updateBook(book) {\n    let endpoint = '/catalog/api/books/' + book.id + '/';\n    let request = {\n        method: 'PUT',\n        body: JSON.stringify(book),\n        headers: {\n            'Content-Type': 'application/json',\n            'X-CSRFTOKEN': Cookies.get('csrftoken')\n        }\n    }\n    return fetch(endpoint, request)\n        .then(response => {return response.json()})\n}\n\nfunction getAuthors() {\n    let endpoint = '/catalog/api/authors/';\n    return fetch(endpoint)\n        .then(response => {return response.json()})\n        .then((result) => result.map((author) => { // add the fields needed for the select component\n            author.value = author.id;\n            author.key = author.id;\n            author.label = author.first_name + ' ' + author.last_name;\n            return author;\n        }));\n}\n\n\nfunction buildParams(endpoint, params) {\n    const url = 'http://' + window.location.host + endpoint;\n    console.log(url);\n    let builtUrl = new URL(url);\n    Object.keys(params).forEach((key) => {\n        builtUrl.searchParams.append(key, params[key])\n    });\n    return builtUrl;\n}\n\nexport {\n    getBooks,\n    createBook,\n    getAuthors,\n    getBook,\n    updateBook\n}","import React from 'react'\nimport { FixedSizeList as List } from \"react-window\";\n\nconst AuthorList =  (props) => {\n    const height = 35; // ??\n    const { options, children, maxHeight, getValue } = props;\n    const [value] = getValue();\n    const initialOffset = options.indexOf(value) * height;\n\n    return (\n        <List\n            height={maxHeight}\n            itemCount={children.length}\n            itemSize={height}\n            initialScrollOffset={initialOffset}>\n\n            {({ index, style }) => <div style={style}>{children[index]}</div>}\n\n        </List>\n    );\n}\n\nexport default AuthorList;","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport Select from 'react-select';\nimport AuthorList from './AuthorList';\nimport {\n    CFormGroup,\n    CLabel,\n    CTextarea,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CRow,\n    CInput,\n    CCardFooter,\n    CButton,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { createBook, updateBook, getAuthors, getBook } from '../../services/book.service';\n\nconst BookEditCreate = (props) => {\n    const params = useParams();\n    const emptyBook = {\n        title: '',\n        titleShort: '',\n        isbn: '',\n        callNumber: '',\n        language: '',\n        pages: '',\n        publisher: '',\n        publisherPlace: '',\n        issued: '',\n        collectionTitle: '',\n        place: '',\n        abstract: ''\n    }\n    const [bookFields, setBookFields] = useState(emptyBook);\n    const [authors, setAuthors] = useState([]);\n    const [selectedAuthors, setSelectedAuthors] = useState([]);\n\n    useEffect(() => {\n        (async function getData(){\n            if (params.id) {\n                let [authorData, bookData] = await Promise.all([getAuthors(), getBook(params.id)]);\n                setBookFields(bookData);\n                setAuthors(authorData);\n                const originalSelectedAuthors = authorData.filter((myAuth) => {\n                    return bookData.author.includes(myAuth.id);\n                })\n                setSelectedAuthors(originalSelectedAuthors);\n            } else {\n                const authorData = await getAuthors();\n                setAuthors(authorData);\n            }\n        })();\n    }, [params]);\n\n    function onAuthorSelectChange(newSelected) {\n        setSelectedAuthors(newSelected);\n    }\n\n    function onFormInputChange(e) {\n        const field = e.target.id;\n        const value = e.target.value;\n        let myBook = JSON.parse(JSON.stringify(bookFields))\n        myBook[field] = value;\n        setBookFields(myBook);\n    }\n\n    function bookSubmitClicked() {\n        bookFields.author = selectedAuthors.map((auth) => {\n            return auth.key;\n        });\n        if(params.id) {\n            updateBook(bookFields).then((res) => {\n                console.log(res);\n            });\n        } else {\n            createBook(bookFields).then((res) => {\n                console.log(res);\n            })\n        }\n    }\n\n    function test() {\n        console.log('test')\n    }\n\n    return (\n        \n        <>\n        <CRow>\n            <CCol>\n                <CCard>\n                    <CCardHeader>\n                    Create Book\n                    </CCardHeader>\n\n                    <CCardBody>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"title\">Authors</CLabel>\n                            <Select\n                                components={{ MenuList: AuthorList }}\n                                onChange={onAuthorSelectChange}\n                                value={selectedAuthors}\n                                options={authors}\n                                isMulti={true}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"title\">Title</CLabel>\n                            <CInput id=\"title\" placeholder=\"Book title\" onChange={onFormInputChange} value={bookFields.title || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"titleShort\">Short Title</CLabel>\n                            <CInput id=\"titleShort\" placeholder=\"Short title\" onChange={onFormInputChange} value={bookFields.titleShort || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"isbn\">ISBN</CLabel>\n                            <CInput id=\"isbn\" placeholder=\"978-1-86197-876-9\" onChange={onFormInputChange} value={bookFields.isbn || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"callNumber\">Call Number</CLabel>\n                            <CInput id=\"callNumber\" placeholder=\"\" onChange={onFormInputChange} value={bookFields.callNumber || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"language\">Language</CLabel>\n                            <CInput id=\"language\" placeholder=\"es\" onChange={onFormInputChange} value={bookFields.language || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"pages\">Pages</CLabel>\n                            <CInput id=\"pages\" placeholder=\"\" onChange={onFormInputChange} value={bookFields.pages || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"publisher\">Publisher</CLabel>\n                            <CInput id=\"publisher\" placeholder=\"\" onChange={onFormInputChange} value={bookFields.publisher || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"publisherPlace\">Publisher Place</CLabel>\n                            <CInput id=\"publisherPlace\" placeholder=\"\" onChange={onFormInputChange} value={bookFields.publisherPlace || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"issued\">Issued</CLabel>\n                            <CInput id=\"issued\" placeholder=\"\" onChange={onFormInputChange} value={bookFields.issued || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"collectionTitle\">Collection Title</CLabel>\n                            <CInput id=\"collectionTitle\" placeholder=\"\" onChange={onFormInputChange} value={bookFields.collectionTitle || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"place\">Place</CLabel>\n                            <CInput id=\"place\" placeholder=\"\" onChange={onFormInputChange} value={bookFields.place || ''}/>\n                        </CFormGroup>\n                        <CFormGroup>\n                            <CLabel htmlFor=\"abstract\">Abstract</CLabel>\n                            <CTextarea \n                                name=\"abstract\" \n                                id=\"abstract\" \n                                rows=\"10\"\n                                placeholder=\"Content...\" onChange={onFormInputChange} value={bookFields.abstract || ''}/>\n                        </CFormGroup>\n                    </CCardBody>\n\n                    <CCardFooter>\n                        <span className='mr-2'>\n                            <CButton type=\"submit\" size=\"sm\" color=\"primary\"  onClick={bookSubmitClicked}>\n                                <CIcon name=\"cil-scrubber\"/> Submit\n                            </CButton>\n                        </span>\n                        <CButton type=\"reset\" size=\"sm\" color=\"danger\" onClick={test}>\n                            <CIcon name=\"cil-ban\"/> Reset\n                        </CButton>\n                    </CCardFooter>\n                </CCard>\n            </CCol>\n        </CRow>\n        \n        </>\n    )\n}\n\nexport default BookEditCreate\n"],"sourceRoot":""}